indepvars4 <-c('startprice', 'condition', 'storage','productline')
exclude <- c('UniqueID', 'biddable','cellular','carrier') # numerical variables to exclude from using all
f1 <- paste(depvar,paste(indepvars1,collapse=' + '),sep=' ~ ')
f2 <- paste(depvar,paste(indepvars2,collapse=' + '),sep=' ~ ')
f3 <- paste(depvar,paste(indepvars3,collapse=' + '),sep=' ~ ')
f4 <- paste(depvar,paste(indepvars4,collapse=' + '),sep=' ~ ')
# Now let's create a logistic regression model:
library(rpart)
library(rpart.plot)
#treeFit <-rpart(isB ~ . - letter, data=dfTrain, method="class")
treeFit <-rpart(f1, data=DescriptionWordsTrain, method="class")
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain$sold, predictTrain[,2]>thres)
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
treeFit <-rpart(f2, data=DescriptionWordsTrain1, method="class")
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
treeFit <-rpart(f2, data=dfTrain1, method="class")
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain1$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
treeFit <-rpart(f2, data=dfTrain2, method="class")
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain2$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain3$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
treeFit <-rpart(f3, data=dfTrain5, method="class")
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain5$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
treeFit <-rpart(f4, data=dfTrain5, method="class")
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain5$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
#treeFit <-rpart(isB ~ . - letter, data=dfTrain, method="class")
treeFit <-rpart(f4, data=dfTrain6, method="class")
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain6$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
#treeFit <-rpart(isB ~ . - letter, data=dfTrain, method="class")
treeFit <-rpart(f4, data=dfTrain7, method="class")
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain7$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
#treeFit <-rpart(isB ~ . - letter, data=dfTrain, method="class")
treeFit <-rpart(f4, data=dfTrain8, method="class")
thres<-.5
predictTrain = predict(treeFit, type = "prob")
cm <-table(dfTrain8$sold, predictTrain[,2]>thres)
addmargins(cm)
getstats(cm)
Step8 = step(glm(f4, data=dfTrain8, family=binomial))
Step7 = step(glm(f4, data=dfTrain7, family=binomial))
Step6 = step(glm(f4, data=dfTrain6, family=binomial))
Step = step(glm(f1, data=DescriptionWordsTrain, family=binomial))
Step1 = step(glm(f2, data=dfTrain1, family=binomial))
Step2 = step(glm(f2, data=dfTrain2, family=binomial))
Step3 = step(glm(f3, data=dfTrain3, family=binomial))
Step4 = step(glm(f3, data=dfTrain4, family=binomial))
Step5 = step(glm(f4, data=dfTrain5, family=binomial))
Step6 = step(glm(f4, data=dfTrain6, family=binomial))
Step7 = step(glm(f4, data=dfTrain7, family=binomial))
Step8 = step(glm(f4, data=dfTrain8, family=binomial))
thres = .5
predictTrainStep <- predict(Step, type="response")
cm <- table(DescriptionWordsTrain$sold,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
# And make predictions on our test set:
predictTrain <- function(x,y)
{ thres = .5
predictTrainStep <- predict(x, type="response")
cm <- table(y$sold,x>thres)
addmargins(cm)
getstats(cm)
}
predictTrain(step8,dfTrain8)
predictTrain(Step8,dfTrain8)
predictTrain(Step8,dfTrain8$sold)
predictTrain(Step8,dfTrain1$sold)
predictTrain <- function(x,y)
{ thres = .5
predictTrainStep <- predict(x, type="response")
cm <- table(y,x>thres)
addmargins(cm)
getstats(cm)
}
predictTrain(Step8,dfTrain8$sold)
predictTrain <- function(x,y)
{ thres = .5
predictTrainStep <- predict(x, type="response")
cm <- table(y,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
}
predictTrain(Step8,dfTrain8$sold)
cm <- table(y,predictTrainStep>thres)
x<-Step8
x
predict*(x,y)
predict(x,y)
predict(x,dfTrain8$sold)
predict(Step8,dfTrain8$sold)
predict(Step7,dfTrain7$sold)
predict(Step7, type="response")
predict(x, type="response")
predictTrain <- function(x,y)
{
thres = .5
predictTrainStep <- predict(x, type="response")
cm <- table(y,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
}
predictTrain(Step8,dfTrain8$sold)
table(dftrain$8,predictTrainStep)
table(dftrain8$sold,predictTrainStep)
table(dfTrain8$sold,predictTrainStep)
predictTrainStep <- predict(x, type="response")
table(dfTrain8$sold,predictTrainStep)
table(dfTrain8$sold,predictTrainStep[,2])
table(dfTrain8$sold,predictTrainStep[,2])
table(dfTrain8$sold,predictTrainStep>.5)
predictTrain <- function(x,y)
{
thres = .5
predictTrainStep <- predict(x, type="response")
cm <- table(y,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
}
pd <- function(x,y)
{
thres = .5
predictTrainStep <- predict(x, type="response")
cm <- table(y,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
}
pd(Step8,dfTrain8$sold)
x <- Step8
y<- dfTrain8$sodl
thres = .5
predictTrainStep <- predict(x, type="response")
cm <- table(y,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
x <- Step8
y<- dfTrain8$sold
thres = .5
predictTrainStep <- predict(x, type="response")
cm <- table(y,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
}
pd((Step8,dfTrain8$sold))
pd(Step8,dfTrain8$sold)
pd <- function(x,y)
{
thres = .5
predictTrainStep <- predict(step, type="response")
cm <- table(dep,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
}
pd(Step8,dfTrain8$sold)
pd <- function(step,dep)
{
thres = .5
predictTrainStep <- predict(step, type="response")
cm <- table(dep,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
}
pd(Step8,dfTrain8$sold)
thres = .5
predictTrainStep <- predict(Step7, type="response")
cm <- table(dfTrain7$sold,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
thres = .5
predictTrainStep <- predict(Step6, type="response")
cm <- table(dfTrain6$sold,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
thres = .5
predictTrainStep <- predict(Step5, type="response")
cm <- table(dfTrain5$sold,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
thres = .5
predictTrainStep <- predict(Step4, type="response")
cm <- table(dfTrain4$sold,predictTrainStep>thres)
addmargins(cm)
getstats(cm)
Step4
depvar <- 'sold'
indepvars1 <-c('wordcount','biddable','startprice', 'cellular','condition', 'storage','productline','carrier')
indepvars2 <-c('startprice', 'cellular','condition', 'storage','productline','carrier')
indepvars3 <-c('startprice', 'condition', 'storage','productline','carrier')
indepvars4 <-c('startprice', 'condition', 'storage','productline')
exclude <- c('UniqueID', 'biddable','cellular','carrier') # numerical variables to exclude from using all
f1 <- paste(depvar,paste(indepvars1,collapse=' + '),sep=' ~ ')
f2 <- paste(depvar,paste(indepvars2,collapse=' + '),sep=' ~ ')
f3 <- paste(depvar,paste(indepvars3,collapse=' + '),sep=' ~ ')
f4 <- paste(depvar,paste(indepvars4,collapse=' + '),sep=' ~ ')
# Now let's create a logistic regression model:
Log  = glm(f1, data=DescriptionWordsTrain, family=binomial)
# Dep and Independent Vars define columns we will be working with
depvar <- 'sold'
indepvars1 <-c('WordCount','biddable','startprice', 'cellular','condition', 'storage','productline','carrier')
indepvars2 <-c('startprice', 'cellular','condition', 'storage','productline','carrier')
indepvars3 <-c('startprice', 'condition', 'storage','productline','carrier')
indepvars4 <-c('startprice', 'condition', 'storage','productline')
exclude <- c('UniqueID', 'biddable','cellular','carrier') # numerical variables to exclude from using all
f1 <- paste(depvar,paste(indepvars1,collapse=' + '),sep=' ~ ')
f2 <- paste(depvar,paste(indepvars2,collapse=' + '),sep=' ~ ')
f3 <- paste(depvar,paste(indepvars3,collapse=' + '),sep=' ~ ')
f4 <- paste(depvar,paste(indepvars4,collapse=' + '),sep=' ~ ')
# Now let's create a logistic regression model:
Log  = glm(f1, data=DescriptionWordsTrain, family=binomial)
View(DescriptionWordsTest)
depvar <- 'sold'
indepvars1 <-c('.')
indepvars2 <-c('startprice', 'cellular','condition', 'storage','productline','carrier')
indepvars3 <-c('startprice', 'condition', 'storage','productline','carrier')
indepvars4 <-c('startprice', 'condition', 'storage','productline')
exclude <- c('UniqueID', 'biddable','cellular','carrier') # numerical variables to exclude from using all
f1 <- paste(depvar,paste(indepvars1,collapse=' + '),sep=' ~ ')
f2 <- paste(depvar,paste(indepvars2,collapse=' + '),sep=' ~ ')
f3 <- paste(depvar,paste(indepvars3,collapse=' + '),sep=' ~ ')
f4 <- paste(depvar,paste(indepvars4,collapse=' + '),sep=' ~ ')
# Now let's create a logistic regression model:
Log  = glm(f1, data=DescriptionWordsTrain, family=binomial)
indepvars1 <-c('.')
exclude1 <- c('biddable') # numerical variables to exclude from using all
indepvars2 <-c('startprice', 'cellular','condition', 'storage','productline','carrier')
indepvars3 <-c('startprice', 'condition', 'storage','productline','carrier')
indepvars4 <-c('startprice', 'condition', 'storage','productline')
f1 <- paste(depvar,paste(indepvars1,collapse=' + '),sep=' ~ ')
f2 <- paste(f1,paste(exclude1,collapse=' - '),sep=' - ')
f2 <- paste(depvar,paste(indepvars2,collapse=' + '),sep=' ~ ')
f3 <- paste(depvar,paste(indepvars3,collapse=' + '),sep=' ~ ')
f4 <- paste(depvar,paste(indepvars4,collapse=' + '),sep=' ~ ')
f2 <- paste(f1,paste(exclude1,collapse=' - '),sep=' - ')
Log1 = glm(f2, data=dfTrain1, family=binomial)
Log2 = glm(f2, data=dfTrain2, family=binomial)
Log2
thres = .5
predictTrain2 <- predict(Log2, type="response")
cm2 <- table(dfTrain2$sold,predictTrain2>thres)
addmargins(cm2)
getstats(cm2)
thres = .5
predictTrain1 <- predict(Log1, type="response")
cm1 <- table(dfTrain1$sold,predictTrain1>thres)
addmargins(cm1)
getstats(cm1)
thres = .5
predictTrain <- predict(Log, type="response")
cm <- table(DescriptionWordsTrain$sold,predictTrain>thres)
addmargins(cm)
getstats(cm)
Log2 = glm(f2, data=dfTrain2, family=binomial)
Log3 = glm(f3, data=dfTrain3, family=binomial)
Log4 = glm(f3, data=dfTrain4, family=binomial)
depvar <- 'sold'
indepvars1 <-c('.')
exclude1 <- c('biddable') # numerical variables to exclude from using all
exclude2 <- c('biddable','cellular') # numerical variables to exclude from using all
exclude3 <- c('biddable','cellular', 'carrier') # numerical variables to exclude from using all
f1 <- paste(depvar,paste(indepvars1,collapse=' + '),sep=' ~ ')
f2 <- paste(f1,paste(exclude1,collapse=' - '),sep=' - ')
f3 <- paste(f1,paste(exclude2,collapse=' - '),sep=' - ')
f4 <- paste(f1,paste(exclude3,collapse=' - '),sep=' - ')
# Now let's create a logistic regression model:
Log  = glm(f1, data=DescriptionWordsTrain, family=binomial)
Log1 = glm(f2, data=dfTrain1, family=binomial)
Log2 = glm(f2, data=dfTrain2, family=binomial)
Log3 = glm(f3, data=dfTrain3, family=binomial)
Log4 = glm(f3, data=dfTrain4, family=binomial)
Log5 = glm(f4, data=dfTrain5, family=binomial)
Log6 = glm(f4, data=dfTrain6, family=binomial)
Log7 = glm(f4, data=dfTrain7, family=binomial)
Log8 = glm(f4, data=dfTrain8, family=binomial)
Log  = glm(f1, data=DescriptionWordsTrain, family=binomial)
Log1 = glm(f2, data=dfTrain1, family=binomial)
Log2 = glm(f2, data=dfTrain2, family=binomial)
Log3 = glm(f3, data=dfTrain3, family=binomial)
depvar <- 'sold'
indepvars1 <-c('.')
exclude1 <- c('biddable') # numerical variables to exclude from using all
exclude2 <- c('biddable','cellular') # numerical variables to exclude from using all
exclude3 <- c('biddable','cellular', 'carrier') # numerical variables to exclude from using all
f1 <- paste(depvar,paste(indepvars1,collapse=' + '),sep=' ~ ')
f2 <- paste(f1,paste(exclude1,collapse=' - '),sep=' - ')
f3 <- paste(f1,paste(exclude2,collapse=' - '),sep=' - ')
f4 <- paste(f1,paste(exclude3,collapse=' - '),sep=' - ')
# Now let's create a logistic regression model:
Log  = glm(f1, data=DescriptionWordsTrain, family=binomial)
Log1 = glm(f2, data=dfTrain1, family=binomial)
Log2 = glm(f2, data=dfTrain2, family=binomial)
Log3 = glm(f3, data=dfTrain3, family=binomial)
Log4 = glm(f3, data=dfTrain4, family=binomial)
Log5 = glm(f4, data=dfTrain5, family=binomial)
Log6 = glm(f4, data=dfTrain6, family=binomial)
Log7 = glm(f4, data=dfTrain7, family=binomial)
Log8 = glm(f4, data=dfTrain8, family=binomial)
# Predict on Training
thres = .5
predictTrain <- predict(Log, type="response")
cm <- table(DescriptionWordsTrain$sold,predictTrain>thres)
addmargins(cm)
getstats(cm)
thres = .5
predictTrain1 <- predict(Log1, type="response")
cm1 <- table(dfTrain1$sold,predictTrain1>thres)
addmargins(cm1)
getstats(cm1)
thres = .5
predictTrain2 <- predict(Log2, type="response")
cm2 <- table(dfTrain2$sold,predictTrain2>thres)
addmargins(cm2)
getstats(cm2)
thres = .5
predictTrain3 <- predict(Log3, type="response")
cm3 <- table(dfTrain3$sold,predictTrain3>thres)
addmargins(cm3)
getstats(cm3)
thres = .5
predictTrain4 <- predict(Log4, type="response")
cm4 <- table(dfTrain4$sold,predictTrain4>thres)
addmargins(cm4)
getstats(cm4)
thres = .5
predictTrain5 <- predict(Log5, type="response")
cm5 <- table(dfTrain5$sold,predictTrain5>thres)
addmargins(cm5)
getstats(cm5)
thres = .5
predictTrain6<- predict(Log6, type="response")
cm6 <- table(dfTrain6$sold,predictTrain6>thres)
addmargins(cm6)
getstats(cm6)
thres = .5
predictTrain7 <- predict(Log7, type="response")
# KAGGLE COMPETITION - DEALING WITH THE TEXT DATA
# This script file is intended to help you deal with the text data provided in the competition data files
# If you haven't already, start by reading the data into R
# Make sure you have downloaded these files from the Kaggle website, and have navigated to the directory where you saved the files on your computer
# Load functions
source('C:/Users/bryan_000/Documents/GitHub/MyWork/functions.R')
# Set Directory
setwd("C:/Users/bryan_000/Documents/GitHub/Kcomp")
# We are adding in the argument stringsAsFactors=FALSE, since we have some text fields
dfTrain = read.csv("eBayiPadTrain.csv", stringsAsFactors=FALSE)
dfTest = read.csv("eBayiPadTest.csv", stringsAsFactors=FALSE)
# Now, let's load the "tm" package.
library(tm)
# Then create a corpus from the description variable. You can use other variables in the dataset for text analytics, but we will just show you how to use this particular variable.
# Note that we are creating a corpus out of the training and testing data.
CorpusDescription = Corpus(VectorSource(c(dfTrain$description, dfTest$description)))
# You can go through all of the standard pre-processing steps like we did in Unit 5:
CorpusDescription = tm_map(CorpusDescription, content_transformer(tolower), lazy=TRUE)
# Remember this extra line is needed after running the tolower step:
CorpusDescription = tm_map(CorpusDescription, PlainTextDocument, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removePunctuation, lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, removeWords, stopwords("english"), lazy=TRUE)
CorpusDescription = tm_map(CorpusDescription, stemDocument, lazy=TRUE)
# Now we are ready to convert our corpus to a DocumentTermMatrix, remove sparse terms, and turn it into a data frame.
# We selected one particular threshold to remove sparse terms, but remember that you can try different numbers!
dtm = DocumentTermMatrix(CorpusDescription)
sparse = removeSparseTerms(dtm, 0.99)
DescriptionWords = as.data.frame(as.matrix(sparse))
# Let's make sure our variable names are okay for R:
colnames(DescriptionWords) = make.names(colnames(DescriptionWords))
# Now we need to split the observations back into the training set and testing set.
# To do this, we can use the head and tail functions in R.
# The head function takes the first "n" rows of DescriptionWords (the first argument to the head function), where "n" is specified by the second argument to the head function.
# So here we are taking the first nrow(eBayTrain) observations from DescriptionWords, and putting them in a new data frame called "DescriptionWordsTrain"
DescriptionWordsTrain = head(DescriptionWords, nrow(dfTrain))
# The tail function takes the last "n" rows of DescriptionWords (the first argument to the tail function), where "n" is specified by the second argument to the tail function.
# So here we are taking the last nrow(eBayTest) observations from DescriptionWords, and putting them in a new data frame called "DescriptionWordsTest"
DescriptionWordsTest = tail(DescriptionWords, nrow(dfTest))
# Note that this split of DescriptionWords works to properly put the observations back into the training and testing sets, because of how we combined them together when we first made our corpus.
# Before building models, we want to add back the original variables from our datasets. We'll add back the dependent variable to the training set, and the WordCount variable to both datasets. You might want to add back more variables to use in your model - we'll leave this up to you!
DescriptionWordsTrain$sold = dfTrain$sold
DescriptionWordsTrain$WordCount = dfTrain$WordCount
DescriptionWordsTest$WordCount =dfTest$WordCount
# Added Back as Well
DescriptionWordsTrain$biddable <-dfTrain$biddable
DescriptionWordsTest$biddable <-dfTest$biddable
DescriptionWordsTrain$startprice <-dfTrain$startprice
DescriptionWordsTest$startprice <- dfTest$startprice
DescriptionWordsTrain$cellular <- dfTrain$cellular
DescriptionWordsTest$cellular <- dfTest$cellular
DescriptionWordsTrain$storage <- dfTrain$storage
DescriptionWordsTest$storage <- dfTest$storage
DescriptionWordsTest$UniqueID <- dfTest$UniqueID
DescriptionWordsTrain$carrier <- dfTrain$carrier
DescriptionWordsTest$carrier <- dfTest$carrier
DescriptionWordsTrain$condition <- dfTrain$condition
DescriptionWordsTest$condition <- dfTest$condition
DescriptionWordsTrain$productline <- dfTrain$productline
DescriptionWordsTest$productline <- dfTest$productline
#SPlit training on biddable
dfTrain1 <-subset(DescriptionWordsTrain,biddable==1)
dfTrain2 <-subset(DescriptionWordsTrain,biddable==0)
# Subset test on biddable
dfTest1 <-subset(DescriptionWordsTest,biddable==1)
dfTest2 <-subset(DescriptionWordsTest,biddable==0)
# Subset training on celuar
dfTrain3 <-subset(dfTrain1,cellular==1)
dfTrain4 <-subset(dfTrain2,cellular==1)
dfTrain5 <-subset(dfTrain1,cellular==0)
dfTrain6 <-subset(dfTrain2,cellular==0)
dfTrain7 <-subset(dfTrain1,cellular=="Unknown")
dfTrain8 <-subset(dfTrain2,cellular=="Unknown")
# Subset test on cellular
dfTest3 <-subset(dfTest1,cellular==1)
dfTest4 <-subset(dfTest2,cellular==1)
dfTest5 <-subset(dfTest1,cellular==0)
dfTest6 <-subset(dfTest2,cellular==0)
dfTest7 <-subset(dfTest1,cellular=="Unknown")
dfTest8 <-subset(dfTest2,cellular=="Unknown")
# Remember that you can always look at the structure of these data frames to understand what we have created
# Baseline on Training data
# Determine the Majority
bl <-table(DescriptionWordsTrain$sold)
majority<-ifelse(bl[1]>bl[2],0,1)
# Fill in a prediction for the majority
predictTrainBase <-rep(majority,nrow(DescriptionWordsTrain))
#Compare
cm <- table(DescriptionWordsTrain$sold,predictTrainBase, exclude=NULL)
addmargins(cm)
getstats(cm)
# Dep and Independent Vars define columns we will be working with
depvar <- 'sold'
indepvars1 <-c('.')
exclude1 <- c('biddable') # numerical variables to exclude from using all
exclude2 <- c('biddable','cellular') # numerical variables to exclude from using all
exclude3 <- c('biddable','cellular', 'carrier') # numerical variables to exclude from using all
f1 <- paste(depvar,paste(indepvars1,collapse=' + '),sep=' ~ ')
f2 <- paste(f1,paste(exclude1,collapse=' - '),sep=' - ')
f3 <- paste(f1,paste(exclude2,collapse=' - '),sep=' - ')
f4 <- paste(f1,paste(exclude3,collapse=' - '),sep=' - ')
# Now let's create a logistic regression model:
Log  = glm(f1, data=DescriptionWordsTrain, family=binomial)
Log1 = glm(f2, data=dfTrain1, family=binomial)
Log2 = glm(f2, data=dfTrain2, family=binomial)
Log3 = glm(f3, data=dfTrain3, family=binomial)
Log4 = glm(f3, data=dfTrain4, family=binomial)
Log5 = glm(f4, data=dfTrain5, family=binomial)
Log6 = glm(f4, data=dfTrain6, family=binomial)
Log7 = glm(f4, data=dfTrain7, family=binomial)
Log8 = glm(f4, data=dfTrain8, family=binomial)
# Predict on Training
thres = .5
predictTrain <- predict(Log, type="response")
cm <- table(DescriptionWordsTrain$sold,predictTrain>thres)
addmargins(cm)
getstats(cm)
thres = .5
predictTrain1 <- predict(Log1, type="response")
cm1 <- table(dfTrain1$sold,predictTrain1>thres)
addmargins(cm1)
getstats(cm1)
thres = .5
predictTrain2 <- predict(Log2, type="response")
cm2 <- table(dfTrain2$sold,predictTrain2>thres)
addmargins(cm2)
getstats(cm2)
thres = .5
predictTrain3 <- predict(Log3, type="response")
cm3 <- table(dfTrain3$sold,predictTrain3>thres)
# K-Means Cluster Analysis
fit <- kmeans(DescriptionWordsTrain[-73], 5) # 5 cluster solution
fit# get cluster means
aggregate(mydata[,-'sold'],by=list(fit$cluster),FUN=mean)
# append cluster assignment
mydata <- data.frame(mydata, fit$cluster)
# append cluster assignment
DescriptionWordsTrain <- data.frame(DescriptionWordsTrain, groups)
fit2 <- glm(sold ~ X100 + box + hous + includ  + may + mint + perfect + sign + still+ wear + wifi + biddable + startprice + cellular + storage + groups.1,data=DescriptionWordsTrain, family=binomial)
# Predict on Training
thres = .5
predictTrainStep <- predict(fit2, type="response")
cm <- table(DescriptionWordsTrain$sold,predictTrainStep>thres)
addmargins(cm)
